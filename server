#!/usr/bin/env bash

export LC_ALL=C

B="[40;36m"
W="[40;37m"
G="[40;32m"
R="[40;31m"
Y="[40;33m"
P="[40;35m"

case "$1" in
start)
  echo $G"STARTING SERVER!"$W
  echo -ne $B'[>         ] TicketServer       \r'$W
  sleep 1
  cd ~/gf_server/TicketServer/
  chmod 777 *
  ./TicketServer -p 7777 &>/dev/null &
  echo -ne $B'[->        ] GatewayServer       \r'$W
  sleep 3
  cd ~/gf_server/GatewayServer/
  chmod 777 *
  ./GatewayServer &>/dev/null &
  echo -ne $B'[-->       ] MissionServer       \r'$W
  sleep 3
  cd ~/gf_server/MissionServer/
  chmod 777 *
  ./MissionServer &>/dev/null &
  echo -ne $B'[--->      ] WorldServer101       \r'$W
  sleep 3
  cd ~/gf_server/WorldServer101/
  chmod 777 *
  ./WorldServer101 &>/dev/null &
  echo -ne $B'[---->     ] ZoneServer101       \r'$W
  sleep 5
  cd ~/gf_server/ZoneServer101/
  chmod 777 *
  ./ZoneServer101 &>/dev/null &
  echo -ne $B'[----->    ] WorldServer102       \r'$W
  sleep 4
  cd ~/gf_server/WorldServer102/
  chmod 777 *
  ./WorldServer102 &>/dev/null &
  echo -ne $B'[------>   ] ZoneServer102       \r'$W
  sleep 5
  cd ~/gf_server/ZoneServer102/
  chmod 777 *
  ./ZoneServer102 &>/dev/null &
  echo -ne $B'[------->  ] WorldServer109       \r'$W
  sleep 4
  cd ~/gf_server/WorldServer109/
  chmod 777 *
  ./WorldServer109 &>/dev/null &
  echo -ne $B'[--------> ] ZoneServer109       \r'$W
  sleep 5
  cd ~/gf_server/ZoneServer109/
  chmod 777 *
  ./ZoneServer109 &>/dev/null &
  echo -ne $B'[--------->] LoginServer       \r'$W
  sleep 4
  cd ~/gf_server/LoginServer/
  chmod 777 *
  ./LoginServer &>/dev/null &

  freemem=$(free -m | grep "Mem:" | awk '{print $4}')
  echo $B"SERVER STARTED! ${Y}Memory Available: ${freemem} MB"${W}

  ;;
stop)
  echo $R"STOPPING SERVER!"$W
  killall -9 LoginServer
  killall -9 GatewayServer
  killall -9 TicketServer
  killall -9 MissionServer
  killall -9 WorldServer101
  killall -9 ZoneServer101
  killall -9 WorldServer102
  killall -9 ZoneServer102
  killall -9 WorldServer109
  killall -9 ZoneServer109
  sleep 1
  
  freemem=$(free -m | grep "Mem:" | awk '{print $4}')
  echo $B"SERVER STOPPED! ${Y}Memory Available: ${freemem} MB"${W}

  ;;
restart)
  ./server stop
  sleep 2
  ./server start
  
  ;;
status)
  freemem=$(free -m | grep "Mem:" | awk '{print $4}')
  echo $Y"Memory Available: ${freemem} MB"${W}

  ;;
backup)
  echo $P"CREATING BACKUP!"$W

	stty -echo
	read -p "Enter CURRENT PostgreSQL Password: " db_pwd
	stty echo
  echo ""
  export PGPASSWORD=$db_pwd

  folder_name=backup_$(date +%Y_%m_%d_%H_%M_%S)
  sudo mkdir -p /root/gf_server/backup/$folder_name
  
  chmod -R 777 /root

	echo "Creating gf_gs backup"
  pg_dump -U postgres -Fp gf_gs > /root/gf_server/backup/$folder_name/gf_gs.sql

	echo "Creating gf_ls backup"
  pg_dump -U postgres -Fp gf_ls > /root/gf_server/backup/$folder_name/gf_ls.sql

	echo "Creating gf_ms backup"
  pg_dump -U postgres -Fp gf_ms > /root/gf_server/backup/$folder_name/gf_ms.sql

  echo $B"BACKUP CREATED! > $folder_name"$W

  ;;
restore)
  echo $P"RESTORING BACKUP!"$W

  if [ -z "$2" ]; then
    echo "Please Use: ./server restore <folder name ex: backup_2023_01_17_02_55_10>"
    exit 1
  fi

  if [ ! -d "/root/gf_server/backup/$2" ]; then
    echo "Backup Folder Not Found"
    exit 1
  fi

  if [ $(find /root/gf_server/backup/$2 -name "gf_gs.sql" -o -name "gf_ls.sql" -o -name "gf_ms.sql" | wc -l) -ne 3 ]; then
    echo "Some Backup Files 'gf_gs.sql, gf_ls.sql, gf_ms.sql' Not Found!"
    exit 1
  fi

	stty -echo
	read -p "Enter CURRENT PostgreSQL Password: " db_pwd
	stty echo
  echo ""
  export PGPASSWORD=$db_pwd

	service postgresql restart

  folder_name=$2

	echo "Restoring gf_gs backup"
	psql -U postgres -c "DROP DATABASE gf_gs;"
	psql -U postgres -c "create database gf_gs encoding 'UTF8' template template0;"
  psql -U postgres -d gf_gs -f /root/gf_server/backup/$folder_name/gf_gs.sql

	echo "Restoring gf_ls backup"
	psql -U postgres -c "DROP DATABASE gf_ls;"
  psql -U postgres -c "create database gf_ls encoding 'UTF8' template template0;"
  psql -U postgres -d gf_ls -f /root/gf_server/backup/$folder_name/gf_ls.sql

	echo "Restoring gf_ms backup"
	psql -U postgres -c "DROP DATABASE gf_ms;"
  psql -U postgres -c "create database gf_ms encoding 'UTF8' template template0;"
  psql -U postgres -d gf_ms -f /root/gf_server/backup/$folder_name/gf_ms.sql

  chmod -R 777 /root

  echo $B"BACKUP RESTORATION DONE! > $folder_name"$W

  ;;
clear)
  echo $P"CLEANING LOGS!"$W
  
  cat /dev/null >/var/log/syslog
  cat /dev/null >/var/log/wtmp
  cat /dev/null >/var/log/maillog
  cat /dev/null >/var/log/messages
  cat /dev/null >/var/log/openwebmail.log
  cat /dev/null >/var/log/maillog
  cat /dev/null >/var/log/secure

  find . -name "*.log.*" -type f -print -exec rm -rf {} \;

  ;;
*)
  echo "Usage: $0 {start|stop|restart|status|backup|restore|clear}"
  echo "start - Start Sever"
  echo "stop - Stop Server"
  echo "restart - Restart Server"
  echo "status - Show Server Memory Usage"
  echo "backup - Create DB backup 'gf_gs, gf_ls, gf_ms'"
  echo "restore - Restore Backup  |Usage: ./server restore <folder name ex: backup_2023_01_17_02_55_10>"
  echo "clear - Clear Server Logs"
  exit 1
  ;;
esac
