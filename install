#!/usr/bin/env bash

bin_folder=_utils/bin

gateway_offset=164ACD
login_offset=1594B9
login_half_offset=15183E
mission_offset=4B5AE7
ticket_offset=11B74B
world_offset=3EA7A7
world_half_offset=39237B
zone_offset=822D47

gateway_fb=GatewayServer
login_fb=LoginServer
mission_fb=MissionServer
ticket_fb=TicketServer
world_bin=WorldServer
zone_bin=ZoneServer

world101_fb=WorldServer101
world102_fb=WorldServer102
world109_fb=WorldServer109

zone101_fb=ZoneServer101
zone102_fb=ZoneServer102
zone109_fb=ZoneServer109

case "$1" in
full)
    clear
    host_ip=$(ip a | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	if [ "$host_ip" != "" ]; then
		echo "1 - Use Current IP: $host_ip  | 2 - Use Other IP"
		read -p "Select Option: " invar
	else
		invar="2"
	fi
	if [ "$invar" = "2" ]; then
		read -p "Enter Your IP: " host_ip
	fi

	stty -echo
	read -p "Enter NEW PostgreSQL Password: " db_pwd
	stty echo
	echo ""
	export PGPASSWORD=$db_pwd

	sudo apt update -y

	hex_ip=""
	hex_half_ip=""

	ip_parts=(${host_ip//./ })
	ip_parts[3]=0
	server_ip="${ip_parts[0]}.${ip_parts[1]}.${ip_parts[2]}.${ip_parts[3]}"
	server_half_ip="${ip_parts[0]}.${ip_parts[1]}."

	for char in $(echo "$server_ip" | grep -o .); do
		hex_ip+=$(printf '%02x' "'$char")
	done

	while [ ${#hex_ip} -lt 30 ]; do
		hex_ip+="00"
	done

	for char in $(echo "$server_half_ip" | grep -o .); do
		hex_half_ip+=$(printf '%02x' "'$char")
	done

	while [ ${#hex_half_ip} -lt 16 ]; do
		hex_half_ip+="00"
	done

	ip_bytes=$(echo $hex_ip | sed 's/\(..\)/\\\x\1/g')
	half_ip_bytes=$(echo $hex_half_ip | sed 's/\(..\)/\\\x\1/g')

	#COPY FILES
	cp -f ${bin_folder}/${gateway_fb} ${gateway_fb}/${gateway_fb}
	cp -f ${bin_folder}/${login_fb} ${login_fb}/${login_fb}
	cp -f ${bin_folder}/${mission_fb} ${mission_fb}/${mission_fb}
	cp -f ${bin_folder}/${ticket_fb} ${ticket_fb}/${ticket_fb}
	cp -f ${bin_folder}/${world_bin} ${world101_fb}/${world101_fb}
	cp -f ${bin_folder}/${world_bin} ${world102_fb}/${world102_fb}
	cp -f ${bin_folder}/${world_bin} ${world109_fb}/${world109_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone101_fb}/${zone101_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone102_fb}/${zone102_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone109_fb}/${zone109_fb}
	
	#PATCH GATEWAY
	echo -en $ip_bytes | dd of=${gateway_fb}/${gateway_fb} bs=1 seek=$((0x$gateway_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH LOGIN
	echo -en $ip_bytes | dd of=${login_fb}/${login_fb} bs=1 seek=$((0x$login_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	#echo -en $half_ip_bytes | dd of=${login_fb}/${login_fb} bs=1 seek=$((0x$login_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH MISSION
	echo -en $ip_bytes | dd of=${mission_fb}/${mission_fb} bs=1 seek=$((0x$mission_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH TICKET
	echo -en $ip_bytes | dd of=${ticket_fb}/${ticket_fb} bs=1 seek=$((0x$ticket_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	#PATCH WORLD101/ZONE101
	echo -en $ip_bytes | dd of=${world101_fb}/${world101_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world101_fb}/${world101_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone101_fb}/${zone101_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	#PATCH WORLD102/ZONE102
	echo -en $ip_bytes | dd of=${world102_fb}/${world102_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world102_fb}/${world102_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone102_fb}/${zone102_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH WORLD109/ZONE109
	echo -en $ip_bytes | dd of=${world109_fb}/${world109_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world109_fb}/${world109_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone109_fb}/${zone109_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

    sed -i "/GameDBPassword/c\GameDBPassword=$db_pwd" "./setup.ini"
	sed -i "/AccountDBPW/c\AccountDBPW=$db_pwd" "./setup.ini"
	sed -i "/AccountDBPW/c\AccountDBPW=$db_pwd" "./GatewayServer/setup.ini"

    sudo apt-get install apache2 -y
	sudo apt-get install php -y
	sudo apt-get install php-cli -y
	sudo apt-get install php-pgsql -y

	sudo rm /var/www/html/index.html

	sudo cp ./_utils/web/*.php /var/www/html/

    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/pgsql.gpg >/dev/null
	echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list >/dev/null
	sudo apt-get update -y
	sudo apt -y install postgresql-13
	POSTGRESQLVERSION=$(psql --version | cut -c 19-20)

	cd "/etc/postgresql/$POSTGRESQLVERSION/main"
	sed -i "s/#logging_collector = off/logging_collector = on/g" postgresql.conf
	sed -i "s/#log_directory = 'log'/log_directory = 'pg_log'/g" postgresql.conf
	sed -i "s/#log_destination = 'stderr'/log_destination = 'csvlog'/g" postgresql.conf
	sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
	sed -i "s+host    all             all             127.0.0.1/32            md5+host    all             all             0.0.0.0/0            md5+g" pg_hba.conf
	sed -i "s/local   all             postgres                                peer/local   all             postgres                                md5/g" pg_hba.conf
	sed -i "s/local   all             all                                     peer/local   all             all                                     md5/g" pg_hba.conf

	sudo -u postgres psql -c "ALTER user postgres WITH password '$db_pwd';"

    sudo service apache2 restart
	service postgresql restart

	sed -i "/server_host =/c\    \$server_host = '$host_ip';" "/var/www/html/config.php"
	sed -i "/db_password =/c\    \$db_password = '$db_pwd';" "/var/www/html/config.php"
   
	chmod 777 /root -R
    psql -U postgres -c "create database gf_gs encoding 'UTF8' template template0;"
	psql -U postgres -c "create database gf_ls encoding 'UTF8' template template0;"
	psql -U postgres -c "create database gf_ms encoding 'UTF8' template template0;"

	psql -U postgres -d gf_gs -c "\i '/root/gf_server/_utils/db/gf_gs.sql';"
	psql -U postgres -d gf_ls -c "\i '/root/gf_server/_utils/db/gf_ls.sql';"
	psql -U postgres -d gf_ms -c "\i '/root/gf_server/_utils/db/gf_ms.sql';"

	psql -U postgres -d gf_ls -c "UPDATE worlds SET ip = '$host_ip';"
	psql -U postgres -d gf_gs -c "UPDATE serverstatus SET int_address = '$host_ip';"
	psql -U postgres -d gf_gs -c "UPDATE serverstatus SET ext_address = '$host_ip' WHERE ext_address != 'none';"

	psql -U postgres -d gf_ls -c "CREATE SEQUENCE public.accounts_id_seq START WITH 1;"
    psql -U postgres -d gf_ls -c "SELECT pg_catalog.setval('public.accounts_id_seq', 1, true);"
    psql -U postgres -d gf_ms -c "SELECT pg_catalog.setval('public.tb_user_idnum_seq', 1, true);"

    echo "SERVER INSTALATION DONE!"

    ;;
db)
	clear
    host_ip=$(ip a | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	if [ "$host_ip" != "" ]; then
		echo "1 - Use Current IP: $host_ip  | 2 - Use Other IP"
		read -p "Select Option: " invar
	else
		invar="2"
	fi
	if [ "$invar" = "2" ]; then
		read -p "Enter Your IP: " host_ip
	fi

	stty -echo
	read -p "Enter CURRENT PostgreSQL Password: " db_pwd
	stty echo
	echo ""
	export PGPASSWORD=$db_pwd

	service postgresql restart
	
	psql -U postgres -c "DROP DATABASE gf_gs;"
	psql -U postgres -c "DROP DATABASE gf_ls;"
	psql -U postgres -c "DROP DATABASE gf_ms;"

	chmod 777 /root -R
    psql -U postgres -c "create database gf_gs encoding 'UTF8' template template0;"
	psql -U postgres -c "create database gf_ls encoding 'UTF8' template template0;"
	psql -U postgres -c "create database gf_ms encoding 'UTF8' template template0;"

	psql -U postgres -d gf_gs -c "\i '/root/gf_server/_utils/db/gf_gs.sql';"
	psql -U postgres -d gf_ls -c "\i '/root/gf_server/_utils/db/gf_ls.sql';"
	psql -U postgres -d gf_ms -c "\i '/root/gf_server/_utils/db/gf_ms.sql';"

	psql -U postgres -d gf_ls -c "UPDATE worlds SET ip = '$host_ip';"
	psql -U postgres -d gf_gs -c "UPDATE serverstatus SET ext_address = '$host_ip' WHERE ext_address != 'none';"

	psql -U postgres -d gf_ls -c "CREATE SEQUENCE public.accounts_id_seq START WITH 1;"
    psql -U postgres -d gf_ls -c "SELECT pg_catalog.setval('public.accounts_id_seq', 1, true);"
    psql -U postgres -d gf_ms -c "SELECT pg_catalog.setval('public.tb_user_idnum_seq', 1, true);"

	echo "SERVER DB RETORATION DONE!"

    ;;
patch)
    clear
    host_ip=$(ip a | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	if [ "$host_ip" != "" ]; then
		echo "1 - Use Current IP: $host_ip  | 2 - Use Other IP"
		read -p "Select Option: " invar
	else
		invar="2"
	fi
	if [ "$invar" = "2" ]; then
		read -p "Enter Your IP: " host_ip
	fi

	stty -echo
	read -p "Enter CURRENT PostgreSQL Password: " db_pwd
	stty echo
	echo ""
	export PGPASSWORD=$db_pwd

	hex_ip=""
	hex_half_ip=""

	ip_parts=(${host_ip//./ })
	ip_parts[3]=0
	server_ip="${ip_parts[0]}.${ip_parts[1]}.${ip_parts[2]}.${ip_parts[3]}"
	server_half_ip="${ip_parts[0]}.${ip_parts[1]}."

	for char in $(echo "$server_ip" | grep -o .); do
		hex_ip+=$(printf '%02x' "'$char")
	done

	while [ ${#hex_ip} -lt 30 ]; do
		hex_ip+="00"
	done

	for char in $(echo "$server_half_ip" | grep -o .); do
		hex_half_ip+=$(printf '%02x' "'$char")
	done

	while [ ${#hex_half_ip} -lt 16 ]; do
		hex_half_ip+="00"
	done

	ip_bytes=$(echo $hex_ip | sed 's/\(..\)/\\\x\1/g')
	half_ip_bytes=$(echo $hex_half_ip | sed 's/\(..\)/\\\x\1/g')

	#COPY FILES
	cp -f ${bin_folder}/${gateway_fb} ${gateway_fb}/${gateway_fb}
	cp -f ${bin_folder}/${login_fb} ${login_fb}/${login_fb}
	cp -f ${bin_folder}/${mission_fb} ${mission_fb}/${mission_fb}
	cp -f ${bin_folder}/${ticket_fb} ${ticket_fb}/${ticket_fb}
	cp -f ${bin_folder}/${world_bin} ${world101_fb}/${world101_fb}
	cp -f ${bin_folder}/${world_bin} ${world102_fb}/${world102_fb}
	cp -f ${bin_folder}/${world_bin} ${world109_fb}/${world109_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone101_fb}/${zone101_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone102_fb}/${zone102_fb}
	cp -f ${bin_folder}/${zone_bin} ${zone109_fb}/${zone109_fb}
	
	#PATCH GATEWAY
	echo -en $ip_bytes | dd of=${gateway_fb}/${gateway_fb} bs=1 seek=$((0x$gateway_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH LOGIN
	echo -en $ip_bytes | dd of=${login_fb}/${login_fb} bs=1 seek=$((0x$login_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	#echo -en $half_ip_bytes | dd of=${login_fb}/${login_fb} bs=1 seek=$((0x$login_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH MISSION
	echo -en $ip_bytes | dd of=${mission_fb}/${mission_fb} bs=1 seek=$((0x$mission_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	
	#PATCH TICKET
	echo -en $ip_bytes | dd of=${ticket_fb}/${ticket_fb} bs=1 seek=$((0x$ticket_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	#PATCH WORLD101/ZONE101
	echo -en $ip_bytes | dd of=${world101_fb}/${world101_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world101_fb}/${world101_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone101_fb}/${zone101_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	#PATCH WORLD102/ZONE102
	echo -en $ip_bytes | dd of=${world102_fb}/${world102_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world102_fb}/${world102_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone102_fb}/${zone102_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	#PATCH WORLD109/ZONE109
	echo -en $ip_bytes | dd of=${world109_fb}/${world109_fb} bs=1 seek=$((0x$world_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $half_ip_bytes | dd of=${world109_fb}/${world109_fb} bs=1 seek=$((0x$world_half_offset)) count=${#half_ip_bytes} conv=notrunc >/dev/null 2>&1
	echo -en $ip_bytes | dd of=${zone109_fb}/${zone109_fb} bs=1 seek=$((0x$zone_offset)) count=${#ip_bytes} conv=notrunc >/dev/null 2>&1

	chmod 777 /root -R
    sed -i "/GameDBPassword/c\GameDBPassword=$db_pwd" "./setup.ini"
	sed -i "/AccountDBPW/c\AccountDBPW=$db_pwd" "./setup.ini"
	sed -i "/AccountDBPW/c\AccountDBPW=$db_pwd" "./GatewayServer/setup.ini"

	sed -i "/server_host =/c\    \$server_host = '$host_ip';" "/var/www/html/config.php"
	sed -i "/db_password =/c\    \$db_password = '$db_pwd';" "/var/www/html/config.php"
    
	psql -U postgres -d gf_ls -c "UPDATE worlds SET ip = '$host_ip';"
	psql -U postgres -d gf_gs -c "UPDATE serverstatus SET int_address = '$host_ip';"
	psql -U postgres -d gf_gs -c "UPDATE serverstatus SET ext_address = '$host_ip' WHERE ext_address != 'none';"

    echo "SERVER IP PATCH DONE!"

    ;;
*)
    echo "----------INSTALLER INFO----------"
    echo "# FULL INSTALATION--------"
    echo "./install.sh full"
    echo "# RESTORE NEW DB------------"
    echo "./install.sh db"
    echo "# NEW IP PATCH------------"
    echo "./install.sh patch"
    exit 1
    ;;
esac